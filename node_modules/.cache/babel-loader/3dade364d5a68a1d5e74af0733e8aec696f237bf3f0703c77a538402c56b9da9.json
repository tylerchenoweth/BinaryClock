{"ast":null,"code":"function convert_to_binary(decimalNumber, num_digits) {\n  let formal_num = \"\";\n  let num = decimalNumber.toString(2);\n\n  // if(num_digits > num.length) \n  for (let i = 0; i < 4 - num.length; i++) {\n    formal_num += \"0\";\n  }\n  formal_num += num;\n  return formal_num;\n}\nexport function getBinary(date_time) {\n  let hour = date_time.getHours();\n  let minute = date_time.getMinutes();\n  let second = date_time.getSeconds();\n  const map = new Map();\n  console.log(hour);\n  map.set(\"hour_tens\", convert_to_binary(Math.floor(hour / 10), 2));\n  map.set(\"hour_units\", convert_to_binary(Math.floor(hour % 10), 4));\n  map.set(\"minute_tens\", convert_to_binary(Math.floor(minute / 10), 3));\n  map.set(\"minute_units\", convert_to_binary(Math.floor(minute % 10), 4));\n  map.set(\"second_tens\", convert_to_binary(Math.floor(second / 10), 3));\n  map.set(\"second_units\", convert_to_binary(Math.floor(second % 10), 4));\n  console.log(map);\n  return map;\n}","map":{"version":3,"names":["convert_to_binary","decimalNumber","num_digits","formal_num","num","toString","i","length","getBinary","date_time","hour","getHours","minute","getMinutes","second","getSeconds","map","Map","console","log","set","Math","floor"],"sources":["/home/sh4ck1et0n/BinaryClock/src/utils/getBinary.js"],"sourcesContent":["function convert_to_binary(decimalNumber, num_digits) {\n    let formal_num = \"\";\n    let num = decimalNumber.toString(2);\n\n    // if(num_digits > num.length) \n        for(let i=0; i<(4-num.length); i++) {\n            formal_num += \"0\";\n        }\n    \n    formal_num += num;\n\n    return formal_num;\n}\n\nexport function getBinary(date_time) {\n\n    let hour = date_time.getHours();\n    let minute = date_time.getMinutes();\n    let second = date_time.getSeconds();\n\n    const map = new Map();\n\n    console.log(hour);\n\n    map.set(\"hour_tens\", convert_to_binary(Math.floor(hour/10), 2));\n    map.set(\"hour_units\", convert_to_binary(Math.floor(hour%10), 4));\n\n    map.set(\"minute_tens\", convert_to_binary(Math.floor(minute/10), 3));\n    map.set(\"minute_units\", convert_to_binary(Math.floor(minute%10), 4));\n\n    map.set(\"second_tens\", convert_to_binary(Math.floor(second/10), 3));\n    map.set(\"second_units\", convert_to_binary(Math.floor(second%10), 4));\n\n\n    console.log(map);\n\n    return map;\n}"],"mappings":"AAAA,SAASA,iBAAiBA,CAACC,aAAa,EAAEC,UAAU,EAAE;EAClD,IAAIC,UAAU,GAAG,EAAE;EACnB,IAAIC,GAAG,GAAGH,aAAa,CAACI,QAAQ,CAAC,CAAC,CAAC;;EAEnC;EACI,KAAI,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAE,CAAC,GAACF,GAAG,CAACG,MAAO,EAAED,CAAC,EAAE,EAAE;IAChCH,UAAU,IAAI,GAAG;EACrB;EAEJA,UAAU,IAAIC,GAAG;EAEjB,OAAOD,UAAU;AACrB;AAEA,OAAO,SAASK,SAASA,CAACC,SAAS,EAAE;EAEjC,IAAIC,IAAI,GAAGD,SAAS,CAACE,QAAQ,CAAC,CAAC;EAC/B,IAAIC,MAAM,GAAGH,SAAS,CAACI,UAAU,CAAC,CAAC;EACnC,IAAIC,MAAM,GAAGL,SAAS,CAACM,UAAU,CAAC,CAAC;EAEnC,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAAC,CAAC;EAErBC,OAAO,CAACC,GAAG,CAACT,IAAI,CAAC;EAEjBM,GAAG,CAACI,GAAG,CAAC,WAAW,EAAEpB,iBAAiB,CAACqB,IAAI,CAACC,KAAK,CAACZ,IAAI,GAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/DM,GAAG,CAACI,GAAG,CAAC,YAAY,EAAEpB,iBAAiB,CAACqB,IAAI,CAACC,KAAK,CAACZ,IAAI,GAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAEhEM,GAAG,CAACI,GAAG,CAAC,aAAa,EAAEpB,iBAAiB,CAACqB,IAAI,CAACC,KAAK,CAACV,MAAM,GAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EACnEI,GAAG,CAACI,GAAG,CAAC,cAAc,EAAEpB,iBAAiB,CAACqB,IAAI,CAACC,KAAK,CAACV,MAAM,GAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAEpEI,GAAG,CAACI,GAAG,CAAC,aAAa,EAAEpB,iBAAiB,CAACqB,IAAI,CAACC,KAAK,CAACR,MAAM,GAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EACnEE,GAAG,CAACI,GAAG,CAAC,cAAc,EAAEpB,iBAAiB,CAACqB,IAAI,CAACC,KAAK,CAACR,MAAM,GAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAGpEI,OAAO,CAACC,GAAG,CAACH,GAAG,CAAC;EAEhB,OAAOA,GAAG;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}