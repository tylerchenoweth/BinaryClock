{"ast":null,"code":"function convert_to_binary(decimalNumber, num_digits) {\n  let formal_num = \"\";\n  let num = decimalNumber.toString(2);\n  if (num_digits > num.length) {\n    for (let i = 0; i < num_digits - num.length; i++) {\n      formal_num += \"0\";\n    }\n  }\n  formal_num += num;\n  return formal_num;\n}\nexport function getBinary(date_time) {\n  // Mod 12 to convert from military time\n  // let hour = date_time.getHours() % 12;\n\n  let hour = date_time.toLocaleString('en-US', {\n    timeZone: \"American/New_York\"\n  }).getHours();\n  let minute = date_time.getMinutes();\n  let second = date_time.getSeconds();\n  const map = new Map();\n\n  // Hours\n  map.set(\"hour_tens\", convert_to_binary(Math.floor(hour / 10), 2));\n  map.set(\"hour_units\", convert_to_binary(Math.floor(hour % 10), 4));\n\n  // Minutes\n  map.set(\"minute_tens\", convert_to_binary(Math.floor(minute / 10), 3));\n  map.set(\"minute_units\", convert_to_binary(Math.floor(minute % 10), 4));\n\n  // Seconds\n  map.set(\"second_tens\", convert_to_binary(Math.floor(second / 10), 3));\n  map.set(\"second_units\", convert_to_binary(Math.floor(second % 10), 4));\n  return map;\n}","map":{"version":3,"names":["convert_to_binary","decimalNumber","num_digits","formal_num","num","toString","length","i","getBinary","date_time","hour","toLocaleString","timeZone","getHours","minute","getMinutes","second","getSeconds","map","Map","set","Math","floor"],"sources":["/home/sh4ck1et0n/BinaryClock/src/utils/getBinary.js"],"sourcesContent":["function convert_to_binary(decimalNumber, num_digits) {\n    let formal_num = \"\";\n    let num = decimalNumber.toString(2);\n\n    if(num_digits > num.length) {\n        for(let i=0; i<(num_digits-num.length); i++) {\n            formal_num += \"0\";\n        }\n    }\n    \n    formal_num += num;\n\n    return formal_num;\n}\n\n\nexport function getBinary(date_time) {\n\n    // Mod 12 to convert from military time\n    // let hour = date_time.getHours() % 12;\n\n    let hour = date_time.toLocaleString('en-US', {\n        timeZone: \"American/New_York\",\n    }).getHours();\n    let minute = date_time.getMinutes();\n    let second = date_time.getSeconds();\n\n    const map = new Map();\n\n    // Hours\n    map.set(\"hour_tens\", convert_to_binary(Math.floor(hour/10), 2));\n    map.set(\"hour_units\", convert_to_binary(Math.floor(hour%10), 4));\n\n    // Minutes\n    map.set(\"minute_tens\", convert_to_binary(Math.floor(minute/10), 3));\n    map.set(\"minute_units\", convert_to_binary(Math.floor(minute%10), 4));\n\n    // Seconds\n    map.set(\"second_tens\", convert_to_binary(Math.floor(second/10), 3));\n    map.set(\"second_units\", convert_to_binary(Math.floor(second%10), 4));\n\n\n    return map;\n}"],"mappings":"AAAA,SAASA,iBAAiBA,CAACC,aAAa,EAAEC,UAAU,EAAE;EAClD,IAAIC,UAAU,GAAG,EAAE;EACnB,IAAIC,GAAG,GAAGH,aAAa,CAACI,QAAQ,CAAC,CAAC,CAAC;EAEnC,IAAGH,UAAU,GAAGE,GAAG,CAACE,MAAM,EAAE;IACxB,KAAI,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAEL,UAAU,GAACE,GAAG,CAACE,MAAO,EAAEC,CAAC,EAAE,EAAE;MACzCJ,UAAU,IAAI,GAAG;IACrB;EACJ;EAEAA,UAAU,IAAIC,GAAG;EAEjB,OAAOD,UAAU;AACrB;AAGA,OAAO,SAASK,SAASA,CAACC,SAAS,EAAE;EAEjC;EACA;;EAEA,IAAIC,IAAI,GAAGD,SAAS,CAACE,cAAc,CAAC,OAAO,EAAE;IACzCC,QAAQ,EAAE;EACd,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;EACb,IAAIC,MAAM,GAAGL,SAAS,CAACM,UAAU,CAAC,CAAC;EACnC,IAAIC,MAAM,GAAGP,SAAS,CAACQ,UAAU,CAAC,CAAC;EAEnC,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAAC,CAAC;;EAErB;EACAD,GAAG,CAACE,GAAG,CAAC,WAAW,EAAEpB,iBAAiB,CAACqB,IAAI,CAACC,KAAK,CAACZ,IAAI,GAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/DQ,GAAG,CAACE,GAAG,CAAC,YAAY,EAAEpB,iBAAiB,CAACqB,IAAI,CAACC,KAAK,CAACZ,IAAI,GAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEhE;EACAQ,GAAG,CAACE,GAAG,CAAC,aAAa,EAAEpB,iBAAiB,CAACqB,IAAI,CAACC,KAAK,CAACR,MAAM,GAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EACnEI,GAAG,CAACE,GAAG,CAAC,cAAc,EAAEpB,iBAAiB,CAACqB,IAAI,CAACC,KAAK,CAACR,MAAM,GAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEpE;EACAI,GAAG,CAACE,GAAG,CAAC,aAAa,EAAEpB,iBAAiB,CAACqB,IAAI,CAACC,KAAK,CAACN,MAAM,GAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EACnEE,GAAG,CAACE,GAAG,CAAC,cAAc,EAAEpB,iBAAiB,CAACqB,IAAI,CAACC,KAAK,CAACN,MAAM,GAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAGpE,OAAOE,GAAG;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}